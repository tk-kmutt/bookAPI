// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.1 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /books)
	FindBooks(ctx echo.Context, params FindBooksParams) error

	// (POST /books)
	AddBook(ctx echo.Context) error

	// (DELETE /books/{id})
	DeleteBook(ctx echo.Context, id ID) error

	// (GET /books/{id})
	FindBookById(ctx echo.Context, id ID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// FindBooks converts echo context to params.
func (w *ServerInterfaceWrapper) FindBooks(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindBooksParams
	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", ctx.QueryParams(), &params.Order)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindBooks(ctx, params)
	return err
}

// AddBook converts echo context to params.
func (w *ServerInterfaceWrapper) AddBook(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddBook(ctx)
	return err
}

// DeleteBook converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteBook(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id ID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteBook(ctx, id)
	return err
}

// FindBookById converts echo context to params.
func (w *ServerInterfaceWrapper) FindBookById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id ID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindBookById(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/books", wrapper.FindBooks)
	router.POST(baseURL+"/books", wrapper.AddBook)
	router.DELETE(baseURL+"/books/:id", wrapper.DeleteBook)
	router.GET(baseURL+"/books/:id", wrapper.FindBookById)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RWwW7cNhD9FWLaoypt7aAH3eKsCywQNEDaW+ADVxxpGVOkMhx5s1jo34uh5F27kpsN",
	"6kOAnrwkH2ce37wZ+QhVaLvg0XOE8gidJt0iI6XVTQj3f+km/TYYK7Id2+ChBNZNVBxUbR0jqe0BMrBy",
	"8KVHkoXXLU44yCBWO2y1hLGMbYrHh04Akcn6BobscUMT6YOsIx+cbNSBWllv1nMaRrNW93jK3mnenZNb",
	"AxkQfuktoYGSqcenVCSwZsF5/u0NnBhYz9ggwTBk8N62lud5W/3Vtn2rfN9ukVSoFWHsHSdNCLkn/4Ig",
	"LgV8icb11TKND2SQXpNGSAGf0vhHPSTreHhyQvIHhQ6JLaZday7S8THrUtF1s5T8FCNsP2PFghQGHzF2",
	"wccUSjv3oYby0xF+JqyhhJ+Ks5WLiXqReA93Qwa3RIHmT6iCwYuqkEGLMeoGl/mebfZpjHnG381eIxes",
	"r8O8otG2nUOlO6si0oOtUNWBlMOKe5KgzlY4KTCV8m2nqx2qq3wFGfTkoIQdcxfLotjv97lOx3mgppju",
	"xuL95t3tH3/e/nKVr/Idty5VwnJqt4lB6NALDcjgASmO7Fb5Kv9VwHIqhyVc56v8GrLUeUnQYhvCffrV",
	"YOocUVvL8zYGSvjdenOTENmzYfNCHc+Q4jSMhuyb2LFfLgCO/T3cSQFHbyXqV6vVaA7P6NMrdNc5W6V3",
	"FJ+jqHFcmmrf8uLJwbOBJ5547gXBK3pywWCte8ffxezfCI0tsZC59/i1w4rRKDxjuhAXRuE7Qs0YlVYe",
	"90qKr6xXvEMVORDmat2P/ARDqLRzYY8ymZ8b461JvpgmNka+Cebwak8d58ALGnNQ2hj5c6I9+3AM/9Eh",
	"lxtjTnL7QxlhyKYeL47WDKMhHDIufJ3TvlgjWt84HN2x1RGNCqNHNmsVe+G94Ih1uj6Z4vtmxWa91NNv",
	"5hQTo5Gn+QFabBqZz6Ef04dcZOyj/K/1qN9J1s06U7ZOeiaECRiVD6x2+gGVriqM8dHd21HO5aF8c9iY",
	"V9L6f9sdw/B3AAAA//8ru17yVAsAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
