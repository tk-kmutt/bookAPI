openapi: 3.0.3
info:
  version: 0.0.1
  title: simple open api
  description: simple api service for lecture
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
paths:
  /books:
    get:
      description:
      operationId: findBooks
      parameters:
        - $ref: "#/components/parameters/BookTags"
        - $ref: "#/components/parameters/Order"
        - $ref: "#/components/parameters/Limit"
      responses:
        '200':
          description: Book response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Creates a new book in the store. Duplicates are allowed
      operationId: addBook
      requestBody:
        description: Book to add to the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '200':
          description: book response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /books/{id}:
    get:
      description: Returns a user based on a single ID, if the user does not have access to the book
      operationId: findBookById
      parameters:
        - $ref: "#/components/parameters/ID"
      responses:
        '200':
          description: book response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      description: deletes a single book based on the ID supplied
      operationId: deleteBook
      parameters:
        - $ref: "#/components/parameters/ID"
      responses:
        '204':
          description: book deleted
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Amazon:
      type: object
      required:
        - name
        - asin
        - maker
        - price
        - url
      properties:
        name:
          type: string
        asin:
          type: string
        maker:
          type: string
        price:
          type: integer
          format: int64
        url:
          type: string
        comment:
          type: string
    AmazonUpdate:
      type: object
      required:
        - name
        - maker
        - price
        - url
      properties:
        name:
          type: string
        maker:
          type: string
        price:
          type: integer
          format: int64
        url:
          type: string
        comment:
          type: string
    AmazonPatch:
      type: object
      properties:
        name:
          type: string
        maker:
          type: string
        price:
          type: integer
          format: int64
        url:
          type: string
        comment:
          type: string
    BookResponse:
      allOf:
        - $ref: '#/components/schemas/Book'
    Book:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        tag:
          type: string
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
  parameters:
    Key:
      name: key
      in: path
      description: data key
      required: true
      schema:
        type: string
    ID:
      name: id
      in: path
      description: data key
      required: true
      schema:
        type: integer
        format: int64
    BookTags:
      name: tags
      in: query
      description: tags to filter by
      required: false
      style: form
      schema:
        type: array
        items:
          type: string
    Page:
      name: page
      in: query
      description: pager
      required: false
      schema:
        type: integer
        format: int32
    Limit:
      name: limit
      in: query
      description: maximum number of results to return
      required: false
      schema:
        type: integer
        format: int32
    Order:
      name: order
      in: query
      description: maximum number of results to return
      required: false
      schema:
        type: string
